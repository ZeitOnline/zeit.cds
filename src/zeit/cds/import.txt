===================================
Importing files from CDS FTP server
===================================

Introduction
------------

The CDS can make files available for import in the CDS FTP server. The
goal of ``gocept.cds.main.import_`` is to import these files from an
FTP server that implements the Content Drehscheibe protocol into a
``gocept.filestore`` spool (in the ``new`` subdirectory).

FTP server setup
----------------

In order to test the import procedure, we need to set up an FTP server
which contains the files to import.

We create a temporary directory to hold the FTP files first:

>>> import tempfile
>>> ftp_dir = tempfile.mkdtemp()

We now create some files on the FTP server that can be imported. We
have these in ``testfiles_import`` in this package. We copy them
over into the temporary directory:

>>> import shutil
>>> import os
>>> testfiles_import_dir = os.path.join(os.path.dirname(__file__), 
...     'testfiles_import')
>>> for entry in os.listdir(testfiles_import_dir):
...     if entry.startswith('.'):
...        continue
...     shutil.copy(os.path.join(testfiles_import_dir, entry), ftp_dir)

Now we can start the server:

>>> import zeit.cds.testing
>>> zeit.cds.testing.start_ftp_server(ftp_dir)

A filestore to import to
------------------------

We now create the ``gocept.filestore`` spool we want to import to:

>>> store_dir = tempfile.mkdtemp()
>>> from gocept.filestore import filestore
>>> fs = filestore.FileStore(store_dir)
>>> fs.prepare()

Tracking log messages
---------------------

Before we start importing, we make sure we can track log messages:

>>> zeit.cds.testing.start_logging()

A convenience function to display the log file:

>>> from zeit.cds.testing import dumplog

Main import scenario
--------------------

We have already put files on the FTP server. We now try to import
them:

>>> import zeit.cds.main
>>> zeit.cds.main.import_(
...   store_dir, 'localhost', 2001, 'test', 'testpw', '/')

The files should now be in the ``new`` directory in our store dir:

>>> l = sorted(fs.list('new'))
>>> l
['.../bar.xml', '.../foo.xml']

We are going to use the with statement below, so we need to enable it
in this doctest with this magical incantation (``with_statement`` is passed
in using a glob):

>>> dummy = with_statement

The files should actually contain the data we expect:

>>> with open(l[0]) as f:
...     print f.read()
This is the file bar.
>>> with open(l[1]) as f:
...     print f.read()
This is the file foo.

Nothing is supposed to be left on the FTP server:

>>> os.listdir(ftp_dir)
[]

This is the log of a successful import:
 
>>> dumplog()
Starting import.
Accessed filestore ...
Connecting to CDS FTP server (host localhost, port 2001, user test, dir /)
Creating lock file: read
Lock file successfully created: read
Downloading: bar.xml
File removed on server: bar.xml
Moved from 'tmp' to 'new': bar.xml
Downloading: foo.xml
File removed on server: foo.xml
Moved from 'tmp' to 'new': foo.xml
Removing lock file: read
Lock file successfully removed: read
Disconnected from CDS FTP server
Exiting with success.

Nothing on the server to import
-------------------------------

If there is nothing at all on the server to import, we won't even attempt to
import:

>>> zeit.cds.main.import_(
...     store_dir, 'localhost', 2001, 'test', 'testpw', '/')
>>> dumplog()
Starting import.
Accessed filestore ...
Connecting to CDS FTP server (host localhost, port 2001, user test, dir /)
Creating lock file: read
Lock file successfully created: read
No new files to import.
Removing lock file: read
Lock file successfully removed: read
Disconnected from CDS FTP server
Exiting with success.

Nonexistent path on FTP server
------------------------------

When the path doesn't exist on the FTP server we cannot import from it:

>>> zeit.cds.main.import_(
...     store_dir, 'localhost', 2001, 'test', 'testpw', '/nonexistent')
>>> dumplog()
Starting import.
Accessed filestore ...
Connecting to CDS FTP server (host localhost, port 2001, user test, dir /nonexistent)
Error accessing FTP server.
Exiting with exception:
Traceback (most recent call last):
  ...
PermanentError: 550 No such file or directory.
...

Shut down
---------

Now we shut down the FTP server:

>>> zeit.cds.testing.stop_ftp_server()

We need to wait a little bit here to make sure things cleanly shut down:

>>> import time
>>> time.sleep(2)

Cleanup
-------

Finally we can clean up the temporary directories:

>>> import shutil
>>> shutil.rmtree(ftp_dir)
>>> shutil.rmtree(store_dir)

We return the logging situation back to normal:

>>> zeit.cds.testing.stop_logging()
